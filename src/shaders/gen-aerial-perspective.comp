#version 450 core
#include "declarations.glsl"

layout(local_size_x = 17, local_size_y = 17) in;

layout(set = 0, binding = 0, std140) uniform UniformBlock {
	Globals globals;
};
layout(set = 0, binding = 1, std140) readonly buffer NodeBlock {
    NodeState nodes[];
};
layout(set = 0, binding = 2) uniform sampler nearest;
layout(set = 0, binding = 3) uniform texture2DArray displacements;
layout(set = 0, binding = 4) uniform texture2D transmittance;
layout(rgba16f, set = 0, binding = 5) writeonly uniform image2DArray aerial_perspective;
layout(set = 0, binding = 6) uniform texture2D clouds;
layout(set = 0, binding = 7) uniform sampler linear;

const float planetRadius = 6371000.0;
const float atmosphereRadius = 6371000.0 + 100000.0;

vec2 rsi(vec3 r0, vec3 rd, float sr);
vec3 atmosphere(vec3 r0, vec3 r1, vec3 pSun);
vec3 precomputed_transmittance2(vec3 x, vec3 y);

void main() {
	ivec2 iPosition = ivec2(gl_GlobalInvocationID.xy * 4);//(nodes[gl_GlobalInvocationID.z].resolution / 8));
	vec3 texcoord = nodes[gl_GlobalInvocationID.z].displacements.origin 
        + vec3(vec2(iPosition) * nodes[gl_GlobalInvocationID.z].displacements._step, 0);
	vec3 position = texture(sampler2DArray(displacements, nearest), texcoord).rgb 
        - nodes[gl_GlobalInvocationID.z].relative_position;

    vec3 x0 = globals.camera;
	vec3 x1 = x0 + position;
	vec3 r = normalize(position);
	vec2 p = rsi(x0, r, atmosphereRadius);

    vec4 output_value = vec4(0, 0, 0, 1);
	if (p.x < p.y && p.y >= 0) {
	    x0 += r * max(p.x, 0.0);
	    output_value.a = precomputed_transmittance2(x1, x0).b;
	    output_value.rgb = atmosphere(x0, x1, globals.sun_direction);
	}
    output_value *= vec4(1.0 / 16.0);

    imageStore(aerial_perspective, ivec3(gl_GlobalInvocationID.xyz), output_value);
}

#include "atmosphere.glsl"
